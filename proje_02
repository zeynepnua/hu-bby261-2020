import tensorflow as tf
import numpy as np
import logging
import matplotlib.pyplot as plt
logger = tf.get_logger()
logger.setLevel(logging.ERROR)

mil = np.array([1.24, 1.86, 2.49, 3.11, 11.18, 62.13], dtype= float)
km = np.array([2, 3, 4, 5, 18, 100], dtype= float)

kullanıcı = int(input("Mili kmye çevirmek için 1, kmyi mile çevirmek için 2 giriniz, İşlem seçiniz: "))
if kullanıcı == 1 :
  for i,c in enumerate(mil):
    print("{} mil = {} km". format(c, km[i]))
  l0= tf.keras.layers.Dense(units=1, input_shape=[1])
  model= tf.keras.Sequential([l0])

  model.compile(loss='mean_squared_error', optimizer=tf.keras.optimizers.Adam(0.1))

  kullanıcı2 = int(input("Öğrenme sayısı belirleyiniz: "))
  history = model.fit(mil, km, epochs=kullanıcı2, verbose=False )
  print("Öğrenmeyi tamamladı..")

  plt.xlabel('Döngü')
  plt.ylabel('Loss')
  plt.plot(history.history['loss'])
  
  kullanıcı3 = float(input("Sonucu tahmin ediniz: "))
  print("Tahmininiz: {} mil". format(model.predict([kullanıcı3])))
  print("Gerçek değeri: {} mil". format(kullanıcı3/0.62))

elif kullanıcı == 2:
  for i,c in enumerate(km):
    print("{} km = {} mil".format(c, mil[i]))
  
  l0 = tf.keras.layers.Dense(units=1, input_shape=[1])
  model = tf.keras.Sequential([l0])
  
  model.compile(loss='mean_squared_error', optimizer=tf.keras.optimizers.Adam(0.1))

  kullanıcı2 = int(input("Öğrenme sayısı belirleyiniz: "))
  history = model.fit(km, mil, epochs=kullanıcı2, verbose=False)
  print("Öğrenmeyi Tamamladı..")

  plt.xlabel('Döngü')
  plt.ylabel('Loss')
  plt.plot(history.history['loss'])

  kullanıcı3 = float(input("Sonucu tahmin ediniz: "))
  print("Tahmininiz: {} km ".format(model.predict([kullanıcı3])))
  print("Gerçek değeri: {} km".format(kullanıcı3*0.62))
